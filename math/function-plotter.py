# -*- coding: utf-8 -*-
"""plot-math-function.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16jvtrrGIoqL4M2laS3YZhnzdbPE_7sEy
"""



"""Let's add some examples and tests to demonstrate the functionality of the plotting program. We'll create a few example functions to plot and show how to use the program with them."""

import numpy as np
import matplotlib.pyplot as plt

def plot_function(func, x_range=(-10, 10)):
  """
  Plots a mathematical function.

  Args:
    func: A Python function that takes a single numerical argument.
    x_range: A tuple specifying the minimum and maximum values for the x-axis.
  """
  x = np.linspace(x_range[0], x_range[1], 400)
  y = func(x)

  # Ensure y has the same shape as x
  if not isinstance(y, np.ndarray) or y.shape != x.shape:
      y = np.full_like(x, y)


  plt.figure(figsize=(8, 6))
  plt.plot(x, y)
  plt.xlabel('x')
  plt.ylabel('f(x)')
  plt.title(f'Graph of {func.__name__}')
  plt.grid(True)
  plt.show()

# Example 1: Linear function
def linear_function(x):
  return 2 * x + 1

plot_function(linear_function)

# Example 2: Quadratic function
def quadratic_function(x):
  return -x**2 + 4

plot_function(quadratic_function)

# Example 3: Sine function
def sine_function(x):
  return np.sin(x)

plot_function(sine_function)

"""We can also add some simple tests to ensure the `plot_function` works as expected with different types of functions and inputs."""

import unittest

class TestPlotFunction(unittest.TestCase):

    def test_linear_function(self):
        # Test with a simple linear function
        def f(x):
            return 3 * x

        # We can't easily test the plot itself, but we can check if the function runs without errors
        try:
            plot_function(f)
            test_passed = True
        except Exception as e:
            print(f"Test failed for linear function: {e}")
            test_passed = False

        self.assertTrue(test_passed)

    def test_constant_function(self):
        # Test with a constant function
        def g(x):
            return 5

        try:
            plot_function(g)
            test_passed = True
        except Exception as e:
            print(f"Test failed for constant function: {e}")
            test_passed = False
        self.assertTrue(test_passed)

    def test_with_different_range(self):
        # Test with a different x-range
        def h(x):
            return x**2

        try:
            plot_function(h, x_range=(-5, 5))
            test_passed = True
        except Exception as e:
            print(f"Test failed for different range: {e}")
            test_passed = False
        self.assertTrue(test_passed)

if __name__ == '__main__':
    unittest.main(argv=['first-arg-is-ignored'], exit=False)
